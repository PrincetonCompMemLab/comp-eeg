function trigger_data = FINAL_EEG()clear allconfig_io; % initialize kernel-level IOoutp(49200,0); % turn off any voltage output on LP2% This script provides an example of a block design for an fMRI experiment% using Matlab and Psychtoolbox for presentation.%try    AssertOpenGL; % verify that PTB will work (assumes OSX)    %rand('state',sum(100*clock)); % initialize the state of the random number generator            %***************************************    % adjustable parameters        % timing parameters (seconds)    %stim_dur         = 1.75; % how long is each image presented?    %stim_text        = 0.25; % how long of a blank between images?    % note: the number of stimuli/block is defined in block.imgid, below.    %       given stim_dur+stim_blank (ie, trial duration), and the number    %       of trials/block, you can determine the block duration.        % size parameters    %image_size = 14; % image width/height (degrees of visual angle)       %% -- Create our indices --%     PA=randperm(6);%     PNA=randperm(30); PNA=PNA(1:20);%     INA=setdiff(1:30,PNA);        n_blocks=48; n_stim_per_block=5;%***************************************    % preset parameters.  DO NOT CHANGE    %---------------------------------------    % datafile    filename = input('Enter a filename: ','s'); % ask user to give a datafile name    filename = strcat(filename,'.mat'); % add matlab extension extension        %---------------------------------------    % setup psychtoolbox    ListenChar(2); % matlab will detect keypresses, but will not print them to command window    HideCursor; % don't show the mouse cursor        KbName('UnifyKeyNames'); % cross-platform defined key names    [keyIsDown, secs, keycode] = KbCheck(-1); % check response (initialize function)    abort_key = KbName('q'); % which key will allow us to abort the experiment? (convert to PTB key index)        bgcolor = [212 212 212]; % RGB triplet (0-255) defining background color    black   = [0 0 0];       % RGB triplet for 'black'    white   = [255 255 255]; % RGB triplet for 'white'        which_win = max(Screen('Screens')); % 0 for main screen, 1 for seconday monitor    [w rect] = Screen('OpenWindow',which_win); % open a Screen Window            % initialize both buffers as background color    Screen('FillRect',w, bgcolor);    Screen('Flip', w,0,1); % flip and do not clear buffer    Screen('FillRect',w, bgcolor);    Screen('Flip', w,0,1);    % Enable alpha blending for images with transparencies    Screen('BlendFunction', w, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);        % find pixel coordinates at center of screen    [xc yc] = RectCenter(rect);        % for drawing images in the center of the screen    image_rect_template = [-0.5 -0.5 0.5 0.5]; % multiply by size and ppd upon drawing    image_rect_shift    = [xc yc xc yc]; % add to image_rect_template to center image        % define the size of the monitor and the viewing distance so we can convert visual angle to pixels    mon_width = 40; % screen width in cm (at scanner = 32)    view_dist = 60; % viewing distance in cm (at scanner = 60)        % calculate pixels per degree    ppd = pi * rect(3) / atan(mon_width/view_dist/2) / 360;	% pixels per degree of visual angle    Screen('TextSize',w, 28); % size of text drawn to screen        %--------------------------------------------------------------------------------------------    % fixation parameters    fixspot.outter_color = [255 255 255]; % white    fixspot.inner_color  = [  0   0   0]; % black        % predetermine fixation spot rectangle    fixspot.fixSize     = 0.25; % width in visual degreees    fixspot.fixMiniSize = 0.1; % width in visual degreees    fixspot.rectDeg     = fixspot.fixSize .* [-.5 -.5 .5 .5]; % [x1 y1 x2 y2]    fixspot.rectPix     = fixspot.rectDeg * ppd + [xc yc xc yc];    fixspot.rectMinDeg  = fixspot.fixMiniSize .* [-.5 -.5 .5 .5]; % [x1 y1 x2 y2]    fixspot.rectMinPix  = fixspot.rectMinDeg * ppd + [xc yc xc yc];    %%%fix_time  = 16; % amount of pure fixation (plus task) before preceeding each block    %%%end_blank = 16; % amount of pure fixation (plus task) after last block            %--------------------------------------------------------------------------------------------%     % setup timing structure%     timing.block_start = repmat(NaN,n_blocks,1); % start time (relative to start time) of each block%     timing.block_dur   = repmat(NaN,n_blocks,1); % duration of each block%     timing.trial_start = repmat(NaN,n_blocks,n_stim_per_block); % start time (relative to start time) of each trial%     timing.trial_dur   = repmat(NaN,n_blocks,n_stim_per_block); % duration of each trial%     timing.run         = NaN;% %         %--------------------------------------------------------------------------------------------    % display instructions and wait for button press to continue    instruct = 'Get ready!';    instruct_width  = RectWidth(Screen('TextBounds',w,instruct));    Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);    Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);    Screen('DrawText', w,instruct, xc-instruct_width/2, yc-30, 0);    Screen('Flip', w);    start_time=GetSecs;    while GetSecs-start_time < 5        WaitSecs(0.001);    end        % wait for trigger (signal from scanner/experimenter to start)%     while ~keyIsDown%         [keyIsDown, secs, keycode] = KbCheck(-1); %check response%         if keycode(abort_key)%             abort = 1;%         end%         WaitSecs(0.001);%     end%             %--------------------------------------------------------------------------------------------    % GO!        % loop over all blocks (rows of block structure)    LCode=KbName('LeftArrow');    RCode=KbName('RightArrow');        start_time = GetSecs;        block=[];    block=zeros(1,5);    block=rand(1,5);    block=round(block);        score=0;        trigger_data = [];        for i=1:5        if block(i)==0            trigger(1);            %trial=zeros(1,50);            trial=rand(1,50);            trial=round(trial);            for j=1:50                if trial(j)==0                    trial(j)=-1;                end            end            for p=1:50                start_time=GetSecs;                Screen('FillRect',w,[82 56 11],[xc-100 yc-150 xc+100 yc+150]);                Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);                Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);                Screen('DrawText',w,num2str(score),[xc-50],[yc+350]);                Screen('Flip',w);                trigger(3);                while GetSecs-start_time < 2                    WaitSecs(0.001);                end                score=score+trial(p);                Screen('DrawText',w,num2str(trial(p)),[xc-50],[yc]);                Screen('DrawText',w,num2str(score),[xc-50],[yc+350]);                Screen('Flip',w);                if trial(p) == 1                    trigger(4);                end                if trial(p) == -1                     trigger(5);                %else warning('Problem_180');                end                while GetSecs-start_time < 2.5                    WaitSecs(0.001);                end                Screen('DrawText',w,num2str(score),[xc-50],[yc+350]);                Screen('Flip',w);                WaitSecs(0.5)            end        WaitSecs(3)            end        if block(i)==1            trigger(2);            trial=zeros(1,50);            trial=rand(1,50);            trial=round(trial);            for j=1:50                if trial(j)==0                    trial(j)=-1;                end            end            for p=1:50                start_time=GetSecs;                Screen('FillRect',w,[82 56 11],[xc-200 xc+100; yc-150 yc-150; xc-100 xc+200; yc+150 yc+150]);                Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);                Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);                Screen('DrawText',w,num2str(score),[xc-50],[yc+350]);                Screen('Flip',w);                trigger(6);                key_pressed=0;                while GetSecs-start_time < 2                    if key_pressed==0                         [keyISDown, Secs, KeyCode]=KbCheck();                        if KeyCode(LCode)==1                            trigger(12);                            key_pressed=1;                        end                        if KeyCode(RCode)==1                            trigger(12);                            key_pressed=2;                        end                    end                    WaitSecs(0.001);                end                if key_pressed==0                    score=score-5;                    Screen('DrawText',w,num2str(-5),[xc-50],[yc]);                    Screen('DrawText',w,num2str(score),[xc-50],[yc+350]);                    Screen('Flip',w);                    trigger(11);                    while GetSecs-start_time < 2.5                        WaitSecs(0.001);                    end                     Screen('Flip',w);                     WaitSecs(0.5)                end                if key_pressed==1                    score=score+trial(p);                    Screen('DrawText',w,num2str(trial(p)),[xc-300],[yc]);                    Screen('DrawText',w,num2str(score),[xc-50],[yc+350]);                    Screen('Flip',w);                    if trial(p) == 1                        trigger(7);                    end                    if trial(p) == -1                             trigger(8);                    end                    while GetSecs-start_time < 2.5                        WaitSecs(0.001);                    end                     Screen('Flip',w);                     WaitSecs(0.5)                end                if key_pressed==2                    score=score+trial(p);                    Screen('DrawText',w,num2str(trial(p)),[xc+300],[yc]);                    Screen('DrawText',w,num2str(score),[xc-50],[yc+350]);                    Screen('Flip',w);                    if trial(p) == 1                        trigger(9);                    end                    if trial(p) == -1                         trigger(10);                    %else warning('Problem_260');                    end                    while GetSecs-start_time < 2.5                        WaitSecs(0.001);                    end                    Screen('DrawText',w,num2str(score),[xc-50],[yc+350]);                    Screen('Flip',w);                    WaitSecs(0.5)                end            end            WaitSecs(3);        end    end            start_time=GetSecs;    Screen('DrawText',w,'Your run score is...',[xc-200], [yc-100]);    Screen('DrawText',w,num2str(score),[xc-200], [yc+100]);    Screen('Flip',w);    trigger_data = trigger(13)    %save('trigger_data',trigger_data);    while GetSecs-start_time < 5        WaitSecs(0.001);    end        %     PAk=1; %     for i = 1:8,% %         %-----------------------------------------------------------------------------------------------%         % start a new block%         block_start = GetSecs;%         timing.block_start(i) = block_start - start_time;%         cond=Conditions(i);%         %         %             if (cond == 1) || (cond == 5) %half perceptual adapt, half imagine adapt%                  for j=1:5,%                      start_time=GetSecs;%                      % -- Text portion --%                      Screen('FillRect',w,bgcolor);%                      name=img_nameA{PA(PAk)}; %access cell to get name%                      name = strrep(name,'.jpg',''); name=strrep(name,'_',' ');%                      Screen('DrawText',w,name,xc,yc+2/3*yc,[255 0 0]);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time < 0.25%                            WaitSecs(0.001); %                      end %                      % -- Show Image --%                      Screen('FillRect',w,bgcolor);%                      img=img_texidA(PA(PAk));%                      Screen('DrawTexture',w,img,[],image_size*ppd*image_rect_template+image_rect_shift);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w); % SHOW ON SCREEN%                      while GetSecs-start_time <2.0%                           WaitSecs(0.001);%                      end %                  end%                  for j=1:5,%                      start_time=GetSecs;%                      % -- Text portion only (for Imagine Adapt) --%                      Screen('FillRect',w,bgcolor);%                      name=img_nameA{PA(PAk)}; %access cell to get name%                      name = strrep(name,'.jpg',''); name=strrep(name,'_',' ');%                      Screen('DrawText',w,name,xc,yc+2/3*yc,[255 0 0]);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time < 2.0%                            WaitSecs(0.001); %                      end %                  end %                  PAk=PAk+1;%                  % -- Show 16 s fixation (No text or images) --%                  start_time=GetSecs; %                  Screen('FillRect',w,bgcolor);%                  Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                  Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                  Screen('Flip',w);%                  while GetSecs-start_time < 16.0%                            WaitSecs(0.001); %                  end %                    %             elseif (cond==2) || (cond==6) %half perceptual adapt, 1/2 imagine non-adapt%                  for j=1:5,%                      start_time=GetSecs;%                      % -- Text portion (Adapt) --%                      Screen('FillRect',w,bgcolor);%                      name=img_nameA{PA(PAk)}; %access cell to get name%                      name = strrep(name,'.jpg',''); name=strrep(name,'_',' ');%                      Screen('DrawText',w,name,xc,yc+2/3*yc,[255 0 0]);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time < 0.25%                            WaitSecs(0.001); %                      end %                      % -- Show Image (Adapt) --%                      Screen('FillRect',w,bgcolor);%                      img=img_texidA(PA(PAk));%                      Screen('DrawTexture',w,img,[],image_size*ppd*image_rect_template+image_rect_shift);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time <2.0%                           WaitSecs(0.001);%                      end %                  end%                  PAk=PAk+1;%                  if cond==2, %                     trials=1:5;%                  else trials=6:10; %                  end %                  % -- Imaginary (Non-adapt) --%                  for j=1:5%                      start_time=GetSecs; %                      Screen('FillRect',w,bgcolor);%                      name=img_nameNA{INA(trials(j))};%                      name = strrep(name,'.jpg',''); name=strrep(name,'_',' ');%                      Screen('DrawText',w,name,xc,yc+2/3*yc,[255 0 0]);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time <2.0%                           WaitSecs(0.001);%                      end %                  end %                  %                  % -- Show 16 s fixation --%                  start_time=GetSecs; %                  Screen('FillRect',w,bgcolor);%                  Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                  Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                  Screen('Flip',w);%                  while GetSecs-start_time < 16.0%                            WaitSecs(0.001); %                  end %                 %             elseif (cond==3) || (cond==7) %all perceptual adapt%                  %                  for j=1:10,%                      start_time=GetSecs;%                      % -- Text portion (Adapt) --%                      Screen('FillRect',w,bgcolor);%                      name=img_nameA{PA(PAk)};%                      name = strrep(name,'.jpg',''); name=strrep(name,'_',' ');%                      Screen('DrawText',w,name,xc,yc+2/3*yc,[255 0 0]);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time < 0.25%                            WaitSecs(0.001); %                      end %                      % -- Show Image (Adapt) --%                      Screen('FillRect',w,bgcolor);%                      img=img_texidA(PA(PAk));%                      Screen('DrawTexture',w,img,[],image_size*ppd*image_rect_template+image_rect_shift);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time <2.0%                           WaitSecs(0.001);%                      end %                  end%                  PAk=PAk+1;%                  % -- Show 16 s fixation --%                  start_time=GetSecs; %                  Screen('FillRect',w,bgcolor);%                  Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                  Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                  Screen('Flip',w);%                  while GetSecs-start_time < 16.0%                            WaitSecs(0.001); %                  end %                 %             elseif (cond==4) || (cond==8) %All perceptual non-adapt (?)%                  if cond==4, %                     trials=1:10;%                  else%                     trials=11:20;%                  end %                  % -- Perceptual (Non-adapt, 10x) --%                  for j=1:10%                      start_time=GetSecs;%                      % -- Text portion (Non-Adapt) --%                      Screen('FillRect',w,bgcolor);%                      name=img_nameNA{PNA(trials(j))};%                      name = strrep(name,'.jpg',''); name=strrep(name,'_',' ');%                      Screen('DrawText',w,name,xc,yc+2/3*yc,[255 0 0]);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time < 0.25%                            WaitSecs(0.001); %                      end %                      % -- Show Image (Non-Adapt) --%                      Screen('FillRect',w,bgcolor);%                      img=img_texidNA(PNA(trials(j)));%                      Screen('DrawTexture',w,img,[],image_size*ppd*image_rect_template+image_rect_shift);%                      Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                      Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                      Screen('Flip',w);%                      while GetSecs-start_time <2.0%                           WaitSecs(0.001);%                      end %                  end %                  %                  % -- Show 16 s fixation --%                  start_time=GetSecs; %                  Screen('FillRect',w,bgcolor);%                  Screen('FillRect',w,fixspot.outter_color,fixspot.rectPix);%                  Screen('FillRect',w,fixspot.inner_color,fixspot.rectMinPix);%                  Screen('Flip',w);%                  while GetSecs-start_time < 16.0%                            WaitSecs(0.001); %                  end %                  %             end %if %         %     end % block for loop        %-----------------------------------------------------------------------------------------------    % clean up, save and display info    ListenChar(0);    Screen('CloseAll');    ShowCursor;        % SAVE WORKSPACE TO A FILE!    save(filename);        % display timing%    timing        %catch    % it is necessary to save the error message for this try...catch in    % case some of the clean-up code includes a try...catch that might    % overwrite the error message (i.e., ListenChar(0); seems to do this)    thiserror = lasterror();        % save workspace!  otherwise we'll potentially loose all access to the data    save('./crash_dump.mat');    fprintf('\n#----------------------------------#\nsaving workspace in ./crash_dump.mat\n#----------------------------------#\n')        % Clean up in case of an error in main code    Screen('CloseAll'); % close any open screens/windows    ShowCursor;         % restore cursor visibility    ListenChar(1);      % keystrokes make it to command line/editor (Ctrl-c)    Priority(0);        % restore normal processing priority        % rethrow error, but print STACK first!    %    "I'm the boss, need the info..." -Dr Evil    display(sprintf('\n'));    for i = 1:length(thiserror.stack)        display(thiserror.stack(i));    end    rethrow(thiserror); % display error message that caused crashend %try..catch..%end % functionfunction output = trigger(type)persistent trigger_data%time=GetSecs;trigger_data = [trigger_data num2str(type)];output = trigger_data;triggerfire(type);endfunction type = triggerfire(type)    config_io    %outp(49200,num2str(type))    outp(49200,type)    WaitSecs(0.004)    outp(49200,0)end